"use strict";(self.webpackChunkkognic_sdk_docs=self.webpackChunkkognic_sdk_docs||[]).push([[7612],{4148:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>C,contentTitle:()=>v,default:()=>I,frontMatter:()=>_,metadata:()=>i,toc:()=>y});const i=JSON.parse('{"id":"upload-data/upload-your-first-scene","title":"Upload your First Scene","description":"When uploading raw data to the Kognic Platform, you need to do so in the form of a scene.","source":"@site/docs/upload-data/upload-your-first-scene.mdx","sourceDirName":"upload-data","slug":"/upload-your-first-scene","permalink":"/docs/upload-your-first-scene","draft":false,"unlisted":false,"editUrl":"https://github.com/annotell/public-docs/edit/master/docs-src/docs/upload-data/upload-your-first-scene.mdx","tags":[],"version":"current","frontMatter":{"id":"upload-your-first-scene","title":"Upload your First Scene","slug":"/upload-your-first-scene"},"sidebar":"docs","previous":{"title":"Data requirements","permalink":"/docs/getting-started/data-reqs"},"next":{"title":"Cameras","permalink":"/docs/kognic-io/scenes/cameras"}}');var o=a(4848),r=a(8453),t=a(5537),s=a(9329);function l(e){const n={code:"code",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from kognic.io.client import KognicIOClient\nfrom kognic.io.model.scene.cameras import Cameras, Frame\nfrom kognic.io.model.scene.resources import Image\n\n# 1. Build scene object\nscene = Cameras(\n    external_id="my-first-scene",\n    frame=Frame(images=[Image(filename="path/to/image.jpg")])\n)\n\n# 2. Upload scene\nclient = KognicIOClient()\nscene_uuid = client.cameras.create(scene).scene_uuid\nprint("Scene uploaded, got uuid:", scene_uuid)\n'})})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}function d(e){const n={code:"code",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from kognic.io.client import KognicIOClient\nfrom kognic.io.model.scene.cameras import Cameras, Frame\nfrom kognic.io.model.scene.resources import Image\n\n# 1. Build scene object\nscene = Cameras(\n    external_id="my-first-scene",\n    frame=Frame(\n        images=[\n          # Sensor names must be unique\n          Image(sensor_name = "CAM1", filename="path/to/image1.jpg"),\n          Image(sensor_name = "CAM2", filename="path/to/image2.jpg")\n        ],\n    )\n)\n\n# 2. Upload scene\nclient = KognicIOClient()\nscene_uuid = client.cameras.create(scene).scene_uuid\nprint("Scene uploaded, got uuid:", scene_uuid)\n'})})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}function m(e){const n={code:"code",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from kognic.io.client import KognicIOClient\nfrom kognic.io.model.scene.cameras_sequence import CamerasSequence, Frame\nfrom kognic.io.model.scene.resources import Image\n\n# 1. Build scene object\nscene = CamerasSequence(\n    external_id="my-first-scene",\n    frames=[\n        # Relative timestamps must be unique and strictly increasing\n        Frame(\n            relative_timestamp=0,\n            frame_id="1",\n            images=[Image(filename="path/to/image1.jpg")],\n        ),\n        Frame(\n            relative_timestamp=100,\n            frame_id="2",\n            images=[Image(filename="path/to/image2.jpg")],\n        ),\n        Frame(\n            relative_timestamp=200,\n            frame_id="3",\n            images=[Image(filename="path/to/image3.jpg")],\n        ),\n    ]\n)\n\n# 2. Upload scene\nclient = KognicIOClient()\nscene_uuid = client.cameras_sequence.create(scene).scene_uuid\nprint("Scene uploaded, got uuid:", scene_uuid)\n'})})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}function h(e){const n={code:"code",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from kognic.io.client import KognicIOClient\nfrom kognic.io.model.calibration import SensorCalibration, PinholeCalibration, LidarCalibration\nfrom kognic.io.model.scene.lidars_and_cameras import LidarsAndCameras, Frame\nfrom kognic.io.model.scene.resources import Image, PointCloud\n\nclient = KognicIOClient()\n\n# 1. Create calibration (see calibration section for more details)\nsensor_calibration = SensorCalibration(\n    external_id = "my-first-calibration",\n    calibration = {\n        "CAM": PinholeCalibration(...),\n        "lidar": LidarCalibration(...)\n    }\n)\ncreated_calibration = client.calibration.create_calibration(sensor_calibration)\n\n# 2. Build scene object\nscene = LidarsAndCameras(\n    external_id=f"my-first-scene",\n    calibration_id = created_calibration.id,\n    frame=Frame(\n        images=[Image(sensor_name = "CAM", filename="path/to/image.jpg")],\n        point_clouds=[PointCloud(sensor_name = "lidar", filename="path/to/pointcloud.pcd")]\n    )\n)\n\n# 3. Upload scene\nscene_uuid = client.lidars_and_cameras.create(scene).scene_uuid\nprint("Scene uploaded, got uuid:", scene_uuid)\n'})})}function f(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}function g(e){const n={code:"code",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from kognic.io.client import KognicIOClient\nfrom kognic.io.model.calibration import SensorCalibration, PinholeCalibration, LidarCalibration\nfrom kognic.io.model.scene.lidars_and_cameras import LidarsAndCameras, Frame\nfrom kognic.io.model.scene.resources import Image, PointCloud\n\nclient = KognicIOClient()\n\n# 1. Create calibration (see calibration section for more details)\nsensor_calibration = SensorCalibration(\n    external_id = "my-first-calibration",\n    calibration = {\n        "CAM1": PinholeCalibration(...),\n        "CAM2": PinholeCalibration(...),\n        "lidar": LidarCalibration(...)\n    }\n)\ncreated_calibration = client.calibration.create_calibration(sensor_calibration)\n\n# 2. Build scene object\nscene = LidarsAndCameras(\n    external_id="my-first-scene",\n    calibration_id = created_calibration.id,\n    frame=Frame(\n        images=[\n          Image(sensor_name = "CAM1", filename="path/to/image1.jpg"),\n          Image(sensor_name = "CAM2", filename="path/to/image2.jpg"),\n        ],\n        point_clouds=[PointCloud(sensor_name = "lidar", filename="path/to/pointcloud.pcd")]\n    )\n)\n\n# 3. Upload scene\nclient = KognicIOClient()\nscene_uuid = client.lidars_and_cameras.create(scene).scene_uuid\nprint("Scene uploaded, got uuid:", scene_uuid)\n'})})}function b(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(g,{...e})}):g(e)}function x(e){const n={code:"code",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from kognic.io.client import KognicIOClient\nfrom kognic.io.model.calibration import SensorCalibration, PinholeCalibration, LidarCalibration\nfrom kognic.io.model.scene.lidars_and_cameras_sequence import LidarsAndCamerasSequence, Frame\nfrom kognic.io.model.scene.resources import Image, PointCloud\n\nclient = KognicIOClient()\n\n# 1. Create calibration (see calibration section for more details)\ncalibration = { "CAM": PinholeCalibration(...), "lidar": LidarCalibration(...) }\nsensor_calibration = SensorCalibration(\n    external_id = "my-first-calibration",\n    calibration = {\n        "CAM": PinholeCalibration(...),\n        "lidar": LidarCalibration(...)\n    }\n)\ncreated_calibration = client.calibration.create_calibration(sensor_calibration)\n\n# 2. Build scene object\nscene = LidarsAndCamerasSequence(\n    external_id="my-first-scene",\n    calibration_id = created_calibration.id,\n    frames=[\n        # Relative timestamps must be unique and strictly increasing\n        Frame(\n            relative_timestamp=0,\n            frame_id="1",\n            images=[Image(sensor_name = "CAM", filename="path/to/image1.jpg")],\n            point_clouds=[PointCloud(sensor_name = "lidar", filename="path/to/pointcloud1.pcd")]\n        ),\n        Frame(\n            relative_timestamp=100,\n            frame_id="2",\n            images=[Image(sensor_name = "CAM", filename="path/to/image2.jpg")],\n            point_clouds=[PointCloud(sensor_name = "lidar", filename="path/to/pointcloud2.pcd")]\n        ),\n        Frame(\n            relative_timestamp=200,\n            frame_id="3",\n            images=[Image(sensor_name = "CAM", filename="path/to/image3.jpg")],\n            point_clouds=[PointCloud(sensor_name = "lidar", filename="path/to/pointcloud3.pcd")]\n        ),\n    ]\n)\n\n# 3. Upload scene\nscene_uuid = client.lidars_and_cameras_sequence.create(scene).scene_uuid\nprint("Scene uploaded, got uuid:", scene_uuid)\n'})})}function j(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(x,{...e})}):x(e)}const _={id:"upload-your-first-scene",title:"Upload your First Scene",slug:"/upload-your-first-scene"},v="Upload your first scene",C={},y=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Code examples",id:"code-examples",level:2}];function k(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",...(0,r.R)(),...e.components},{Details:a}=n;return a||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"upload-your-first-scene",children:"Upload your first scene"})}),"\n",(0,o.jsxs)(n.p,{children:["When uploading raw data to the Kognic Platform, you need to do so in the form of a ",(0,o.jsx)(n.strong,{children:"scene"}),".\nA scene is a collection of data from different sources, such as images, point clouds, and other sensor data."]}),"\n",(0,o.jsx)(n.p,{children:"This guide will walk you through the process of uploading your first scene, either in 2D (camera only) or 3D (camera and LiDAR/RADAR)."}),"\n",(0,o.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsxs)(n.p,{children:["You have successfully followed the ",(0,o.jsx)(n.a,{href:"/docs/getting-started/quickstart",children:"Quickstart"})," guide and have the ",(0,o.jsx)(n.code,{children:"kognic-io"})," library installed. For users with access to multiple workspaces you need to ",(0,o.jsx)(n.a,{href:"https://developers.kognic.com/docs/kognic-apis#specifying-a-workspace",children:"specify a workspace to upload data too."})]}),"\n",(0,o.jsx)(n.h2,{id:"code-examples",children:"Code examples"}),"\n",(0,o.jsxs)(a,{children:[(0,o.jsx)("summary",{children:(0,o.jsx)("h2",{style:{margin:"0px"},children:"Uploading a 2D scene"})}),(0,o.jsxs)(n.p,{children:["To upload a 2D scene, you need to have the raw images available on your local machine (or create a ",(0,o.jsx)(n.a,{href:"https://developers.kognic.com/docs/kognic-io/overview#data-from-callback",children:"callback"})," for remote data).\nIt is a two-step process:"]}),(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Build the scene object in Python"}),"\n",(0,o.jsx)(n.li,{children:"Upload the scene object to the Kognic Platform"}),"\n"]}),(0,o.jsx)(n.p,{children:"Below follows examples for a few different cases."}),(0,o.jsxs)(t.A,{children:[(0,o.jsx)(s.A,{value:"one-image",label:"One Image",default:!0,children:(0,o.jsx)(c,{})}),(0,o.jsx)(s.A,{value:"multiple-images",label:"Multiple Images",default:!0,children:(0,o.jsx)(u,{})}),(0,o.jsx)(s.A,{value:"sequence",label:"Sequence",children:(0,o.jsx)(p,{})})]})]}),"\n",(0,o.jsxs)(a,{children:[(0,o.jsx)("summary",{children:(0,o.jsx)("h2",{style:{margin:"0px"},children:"Uploading a 2D/3D scene"})}),(0,o.jsxs)(n.p,{children:["To upload a 2D/3D scene, you need to have the raw images and point clouds available on your local machine (or create a ",(0,o.jsx)(n.a,{href:"https://developers.kognic.com/docs/kognic-io/overview#data-from-callback",children:"callback"})," for remote data).\nIn addition you need to have calibration data available.\nIt is a three-step process:"]}),(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Create a ",(0,o.jsx)(n.a,{href:"./kognic-io/calibrations/overview",children:"calibration"})]}),"\n",(0,o.jsx)(n.li,{children:"Build the scene object in Python, referencing the calibration from the previous step"}),"\n",(0,o.jsx)(n.li,{children:"Upload the scene object to the Kognic Platform"}),"\n"]}),(0,o.jsx)(n.p,{children:"Below follows examples for a few different cases."}),(0,o.jsxs)(t.A,{children:[(0,o.jsx)(s.A,{value:"one-image-one-lidar",label:"One Image",default:!0,children:(0,o.jsx)(f,{})}),(0,o.jsx)(s.A,{value:"multiple-images",label:"Multiple Images",default:!0,children:(0,o.jsx)(b,{})}),(0,o.jsx)(s.A,{value:"2d/3d-sequence",label:"Sequence",default:!0,children:(0,o.jsx)(j,{})})]}),(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["Multiple point clouds is also supported, but not shown in the examples above since that requires a bit more data.\nSee the ",(0,o.jsx)(n.a,{href:"/docs/kognic-io/scenes/lidars_with_imu_data",children:"Motion Compensation"})," section for more details."]})})]}),"\n",(0,o.jsxs)(a,{children:[(0,o.jsx)("summary",{children:(0,o.jsx)("h2",{style:{margin:"0px"},children:"Uploading using ZOD Data"})}),(0,o.jsxs)(n.p,{children:["We have exemplar code and a tutorial for uploading scenes using ",(0,o.jsx)(n.a,{href:"https://zod.zenseact.com/",children:"Zenseact Open Dataset (ZOD)"})," data, including 2D, 3D,\nand aggregated 3D scenes. ",(0,o.jsx)(n.a,{href:"./upload-data/upload-zod-data",children:"Check out the guide document and exemplar code here!"})]}),(0,o.jsx)(n.p,{children:"If you have the ZOD data downloaded, and have Kognic API credentials, the examples will run out of the box to create\nfunctional scenes!"})]})]})}function I(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(k,{...e})}):k(e)}},9329:(e,n,a)=>{a.d(n,{A:()=>t});a(6540);var i=a(8215);const o={tabItem:"tabItem_Ymn6"};var r=a(4848);function t(e){let{children:n,hidden:a,className:t}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,i.A)(o.tabItem,t),hidden:a,children:n})}},5537:(e,n,a)=>{a.d(n,{A:()=>C});var i=a(6540),o=a(8215),r=a(5627),t=a(6347),s=a(372),l=a(604),c=a(1861),d=a(8749);function u(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:n,children:a}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:a,attributes:i,default:o}}=e;return{value:n,label:a,attributes:i,default:o}}))}(a);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function p(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:a}=e;const o=(0,t.W6)(),r=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,l.aZ)(r),(0,i.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(o.location.search);n.set(r,e),o.replace({...o.location,search:n.toString()})}),[r,o])]}function f(e){const{defaultValue:n,queryString:a=!1,groupId:o}=e,r=m(e),[t,l]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=a.find((e=>e.default))??a[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:r}))),[c,u]=h({queryString:a,groupId:o}),[f,g]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[o,r]=(0,d.Dv)(a);return[o,(0,i.useCallback)((e=>{a&&r.set(e)}),[a,r])]}({groupId:o}),b=(()=>{const e=c??f;return p({value:e,tabValues:r})?e:null})();(0,s.A)((()=>{b&&l(b)}),[b]);return{selectedValue:t,selectValue:(0,i.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),g(e)}),[u,g,r]),tabValues:r}}var g=a(9136);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=a(4848);function j(e){let{className:n,block:a,selectedValue:i,selectValue:t,tabValues:s}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.a_)(),d=e=>{const n=e.currentTarget,a=l.indexOf(n),o=s[a].value;o!==i&&(c(n),t(o))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const a=l.indexOf(e.currentTarget)+1;n=l[a]??l[0];break}case"ArrowLeft":{const a=l.indexOf(e.currentTarget)-1;n=l[a]??l[l.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":a},n),children:s.map((e=>{let{value:n,label:a,attributes:r}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>{l.push(e)},onKeyDown:u,onClick:d,...r,className:(0,o.A)("tabs__item",b.tabItem,r?.className,{"tabs__item--active":i===n}),children:a??n},n)}))})}function _(e){let{lazy:n,children:a,selectedValue:r}=e;const t=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=t.find((e=>e.props.value===r));return e?(0,i.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:t.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function v(e){const n=f(e);return(0,x.jsxs)("div",{className:(0,o.A)("tabs-container",b.tabList),children:[(0,x.jsx)(j,{...n,...e}),(0,x.jsx)(_,{...n,...e})]})}function C(e){const n=(0,g.A)();return(0,x.jsx)(v,{...e,children:u(e.children)},String(n))}},8453:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>s});var i=a(6540);const o={},r=i.createContext(o);function t(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);