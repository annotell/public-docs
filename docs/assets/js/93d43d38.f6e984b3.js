"use strict";(self.webpackChunkkognic_sdk_docs=self.webpackChunkkognic_sdk_docs||[]).push([[984],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?o.createElement(f,i(i({ref:t},c),{},{components:n})):o.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9402:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var o=n(7462),r=(n(7294),n(3905));const a={title:"Point clouds"},i=void 0,s={unversionedId:"kognic-io/resources/pointclouds",id:"kognic-io/resources/pointclouds",title:"Point clouds",description:"The API allows uploading of annotation project related data such as images and point clouds. Kognic uses a potree format internally to represent and present point clouds, this means that uploaded point cloud data needs to be converted into this format before it can be used as input in the system. We currently support automatic conversion of three formats: pcd, csv and las. The converter does not however exhaustively support all possible versions of these formats, see below for details of each format.",source:"@site/docs/kognic-io/resources/pointclouds.md",sourceDirName:"kognic-io/resources",slug:"/kognic-io/resources/pointclouds",permalink:"/docs/kognic-io/resources/pointclouds",draft:!1,editUrl:"https://github.com/annotell/public-docs/docs-src/docs/kognic-io/resources/pointclouds.md",tags:[],version:"current",frontMatter:{title:"Point clouds"},sidebar:"docs",previous:{title:"Images",permalink:"/docs/kognic-io/resources/images"},next:{title:"OpenLABEL format",permalink:"/docs/openlabel/openlabel-format"}},l={},p=[{value:"PCD",id:"pcd",level:2},{value:"CSV",id:"csv",level:2},{value:"LAS",id:"las",level:2}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The API allows uploading of annotation project related data such as images and point clouds. Kognic uses a potree format internally to represent and present point clouds, this means that uploaded point cloud data needs to be converted into this format before it can be used as input in the system. We currently support automatic conversion of three formats: ",(0,r.kt)("strong",{parentName:"p"},"pcd"),", ",(0,r.kt)("strong",{parentName:"p"},"csv")," and ",(0,r.kt)("strong",{parentName:"p"},"las"),". The converter does not however exhaustively support all possible versions of these formats, see below for details of each format."),(0,r.kt)("p",null,"A timestamp field must always be present in pointclouds, both in single-frame and sequence inputs, but the values are irrelevant ",(0,r.kt)("a",{parentName:"p",href:"/docs/kognic-io/inputs/lidars_with_imu_data#enabledisable-motion-compensation"},"if motion compensation is not enabled"),"."),(0,r.kt)("p",null,"An intensity field may be provided in pointclouds and will be preserved during conversion. If omitted, the intensity for all points will be zero."),(0,r.kt)("p",null,"Color and other auxiliary data that is not used in the platform is currently discarded in the conversion to potree."),(0,r.kt)("admonition",{title:"Column names must be exact",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The column names must be provided as documented below. If they are not, the conversion will fail. In the case of timestamps,\ndefault values of 0 will be used instead.")),(0,r.kt)("h2",{id:"pcd"},"PCD"),(0,r.kt)("p",null,"The currently supported format includes the following header:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"VERSION .7\nFIELDS x y z intensity timestamp\nSIZE 4 4 4 4 4\nTYPE F F F U U\nCOUNT 1 1 1 1 1\nWIDTH <w>\nHEIGHT <h>\nVIEWPOINT 0 0 0 1 0 0 0\nPOINTS <n>\nDATA ascii\n")),(0,r.kt)("p",null,"Apart from ",(0,r.kt)("inlineCode",{parentName:"p"},"ascii")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"DATA")," type, we also support ",(0,r.kt)("inlineCode",{parentName:"p"},"binary")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"binary_compressed"),". Note that we currently don't support\norganized point clouds in the ",(0,r.kt)("inlineCode",{parentName:"p"},"binary_compressed")," case, i.e. when ",(0,r.kt)("inlineCode",{parentName:"p"},"HEIGHT")," is not equal to 1."),(0,r.kt)("h2",{id:"csv"},"CSV"),(0,r.kt)("p",null,"We currently only support the following exact header and using ",(0,r.kt)("inlineCode",{parentName:"p"},",")," as separation character (where ",(0,r.kt)("inlineCode",{parentName:"p"},"intensity")," is uint8,",(0,r.kt)("inlineCode",{parentName:"p"},"ts_gps")," is an uint64 and ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"y"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"z")," are all float32):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"ts_gps,x,y,z,intensity\n")),(0,r.kt)("p",null,"All other formats will fail."),(0,r.kt)("h2",{id:"las"},"LAS"),(0,r.kt)("p",null,"We currently support version 1.2 and point format id 3, as defined in the ",(0,r.kt)("a",{parentName:"p",href:"https://www.asprs.org/a/society/committees/standards/asprs_las_format_v12.pdf"},"las 1.2 specification"),". All other formats will cause the conversion to fail."))}d.isMDXComponent=!0}}]);