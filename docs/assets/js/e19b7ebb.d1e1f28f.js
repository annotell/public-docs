"use strict";(self.webpackChunkkognic_sdk_docs=self.webpackChunkkognic_sdk_docs||[]).push([[478],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>u});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),d=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=d(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(n),g=a,u=p["".concat(c,".").concat(g)]||p[g]||m[g]||o;return n?r.createElement(u,i(i({ref:t},l),{},{components:n})):r.createElement(u,i({ref:t},l))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var d=2;d<o;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},2521:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var r=n(7462),a=(n(7294),n(3905));const o={title:"Aggregated Lidars and Cameras Sequence"},i=void 0,s={unversionedId:"kognic-io/scenes/aggregated_lidars_and_cameras_seq",id:"kognic-io/scenes/aggregated_lidars_and_cameras_seq",title:"Aggregated Lidars and Cameras Sequence",description:"This feature is new in version 1.1.5",source:"@site/docs/kognic-io/scenes/aggregated_lidars_and_cameras_seq.md",sourceDirName:"kognic-io/scenes",slug:"/kognic-io/scenes/aggregated_lidars_and_cameras_seq",permalink:"/docs/kognic-io/scenes/aggregated_lidars_and_cameras_seq",draft:!1,editUrl:"https://github.com/annotell/public-docs/docs-src/docs/kognic-io/scenes/aggregated_lidars_and_cameras_seq.md",tags:[],version:"current",frontMatter:{title:"Aggregated Lidars and Cameras Sequence"},sidebar:"docs",previous:{title:"Lidars and Cameras Sequence",permalink:"/docs/kognic-io/scenes/lidars_and_cameras_seq"},next:{title:"Motion Compensation",permalink:"/docs/kognic-io/scenes/lidars_with_imu_data"}},c={},d=[],l={toc:d};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"This feature is new in version 1.1.5")),(0,a.kt)("p",null,"An ",(0,a.kt)("inlineCode",{parentName:"p"},"AggregatedLidarsAndCamerasSeq")," scene consists of a sequence of camera images and lidar point clouds, where each\nframe consists on 1-9 camera images as well as 1-20 point clouds. What differentiates ",(0,a.kt)("inlineCode",{parentName:"p"},"AggregatedLidarsAndCamerasSeq"),"\nfrom ",(0,a.kt)("inlineCode",{parentName:"p"},"LidarsAndCamerasSeq")," is that point clouds are aggregated over time during annotation which results in one big\npoint cloud in the coordinate system of the first frame. Therefore, ego motion data is ",(0,a.kt)("strong",{parentName:"p"},"mandatory")," for this type of\nscene. For more documentation on what each field corresponds to in the ",(0,a.kt)("inlineCode",{parentName:"p"},"AggregatedLidarsAndCamerasSeq")," object please\ncheck the section related to ",(0,a.kt)("a",{parentName:"p",href:"/docs/kognic-io/overview"},"Scene Overview"),"."),(0,a.kt)("p",null,"Refer to ",(0,a.kt)("a",{parentName:"p",href:"/docs/kognic-io/coordinate_systems"},"Coordinate Systems")," for more information about what coordinate systems to use."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"reference",reference:!0},"https://github.com/annotell/kognic-io-examples-python/blob/master/examples/agg_lidars_and_cameras_seq.py\n")),(0,a.kt)("admonition",{title:"Use dryrun to validate scene",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Setting ",(0,a.kt)("inlineCode",{parentName:"p"},"dryrun")," parameter to true in the method call, will validate the scene using the API but not create it.")),(0,a.kt)("admonition",{title:"reuse calibration",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Note that you can, and should, reuse the same calibration for multiple s if possible.")))}p.isMDXComponent=!0}}]);