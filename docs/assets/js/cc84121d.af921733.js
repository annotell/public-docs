"use strict";(self.webpackChunkkognic_sdk_docs=self.webpackChunkkognic_sdk_docs||[]).push([[758],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),d=a,m=p["".concat(s,".").concat(d)]||p[d]||f[d]||o;return n?r.createElement(m,l(l({ref:t},u),{},{components:n})):r.createElement(m,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4860:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={title:"Scene Feature Flags"},l=void 0,i={unversionedId:"kognic-io/feature_flags",id:"kognic-io/feature_flags",title:"Scene Feature Flags",description:"To make the scene creation process more flexible we support optional feature flags that can be passed at scene creation time.",source:"@site/docs/kognic-io/feature_flags.md",sourceDirName:"kognic-io",slug:"/kognic-io/feature_flags",permalink:"/docs/kognic-io/feature_flags",draft:!1,editUrl:"https://github.com/annotell/public-docs/docs-src/docs/kognic-io/feature_flags.md",tags:[],version:"current",frontMatter:{title:"Scene Feature Flags"},sidebar:"docs",previous:{title:"Motion Compensation",permalink:"/docs/kognic-io/scenes/lidars_with_imu_data"},next:{title:"Pre-annotations",permalink:"/docs/kognic-io/pre_annotations"}},s={},c=[{value:"Currently Supported Features",id:"currently-supported-features",level:2},{value:"<code>PointCloudFeatures</code>",id:"pointcloudfeatures",level:3}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"To make the scene creation process more flexible we support optional ",(0,a.kt)("em",{parentName:"p"},"feature flags")," that can be passed at scene creation time.\nFeature flags are used to turn on or off some options when creating scenes."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"FeatureFlags")," is a set-like object that holds the flags. There are three ways to establish a set of flags:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Defaults (some flags will be set): ",(0,a.kt)("inlineCode",{parentName:"li"},"FeatureFlags.default()")),(0,a.kt)("li",{parentName:"ul"},"Empty (no flags are set): ",(0,a.kt)("inlineCode",{parentName:"li"},"FeatureFlags()")),(0,a.kt)("li",{parentName:"ul"},"Custom (exactly the specified flags are\nset): ",(0,a.kt)("inlineCode",{parentName:"li"},"FeatureFlags(FeatureFlags.PointCloudFeatures.MOTION_COMPENSATION)"))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"FeatureFlags")," constructor takes one or more params, each of which is a flag from the lists defined below. If the argument ",(0,a.kt)("inlineCode",{parentName:"p"},"feature_flags")," is not passed when creating a scene (i.e. ",(0,a.kt)("inlineCode",{parentName:"p"},"feature_flags=None"),"), then the default set will be used."),(0,a.kt)("h2",{id:"currently-supported-features"},"Currently Supported Features"),(0,a.kt)("h3",{id:"pointcloudfeatures"},(0,a.kt)("inlineCode",{parentName:"h3"},"PointCloudFeatures")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Flag"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Default state"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"MOTION_COMPENSATION")),(0,a.kt)("td",{parentName:"tr",align:"left"},"Enabled"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Causes ",(0,a.kt)("a",{parentName:"td",href:"scenes/lidars_with_imu_data"},"motion compensation of point clouds")," using IMU data.")))))}p.isMDXComponent=!0}}]);