"use strict";(self.webpackChunkkognic_sdk_docs=self.webpackChunkkognic_sdk_docs||[]).push([[7042],{7346:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>a});var i=n(4848),c=n(8453);const o={title:"Projects"},s=void 0,r={id:"kognic-io/project",title:"Projects",description:"Project",source:"@site/docs/kognic-io/project.md",sourceDirName:"kognic-io",slug:"/kognic-io/project",permalink:"/docs/kognic-io/project",draft:!1,unlisted:!1,editUrl:"https://github.com/annotell/public-docs/edit/master/docs-src/docs/kognic-io/project.md",tags:[],version:"current",frontMatter:{title:"Projects"},sidebar:"docs",previous:{title:"Key Concepts",permalink:"/docs/"},next:{title:"Overview",permalink:"/docs/kognic-io/overview"}},l={},a=[{value:"Project",id:"project",level:2},{value:"List Projects",id:"list-projects",level:3},{value:"Batch",id:"batch",level:2},{value:"Batch Status",id:"batch-status",level:3},{value:"Listing Batches",id:"listing-batches",level:3},{value:"Creating Batches",id:"creating-batches",level:3},{value:"Publish Batch",id:"publish-batch",level:3}];function h(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"project",children:"Project"}),"\n",(0,i.jsxs)(t.p,{children:["A Kognic ",(0,i.jsx)(t.a,{href:"/docs/",children:"project"})," must first be set in order to create inputs.\nProjects are usually configured by the Kognic Professional Services team, during the Guideline Agreement Process (GAP) of a new client engagement."]}),"\n",(0,i.jsx)(t.h3,{id:"list-projects",children:"List Projects"}),"\n",(0,i.jsxs)(t.p,{children:["All existing projects within your organization can be listed by using the Python API KognicIOClient. Make sure the authentication are set (see ",(0,i.jsx)(t.a,{href:"/docs/kognic-apis#authentication",children:"Authentication"}),")."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"from kognic.io.client import KognicIOClient\nclient = KognicIOClient()\nprojects = client.project.get_projects()\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Alternatively, projects can be listed with the ",(0,i.jsx)(t.code,{children:"kognicutil"})," command line interface (CLI)"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-shell",children:"kognicutil projects\n"})}),"\n",(0,i.jsx)(t.h2,{id:"batch",children:"Batch"}),"\n",(0,i.jsxs)(t.p,{children:["Input ",(0,i.jsx)(t.a,{href:"/docs/",children:"batches"})," allow further grouping of inputs into smaller batches within a project. Specifying batch during the input creation is optional, and will otherwise be the latest open batch by default."]}),"\n",(0,i.jsx)(t.h3,{id:"batch-status",children:"Batch Status"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Status"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"pending"}),(0,i.jsx)(t.td,{children:"Batch has been created but is still not fully configured by Kognic. Either during project setup or requested changes"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"open"}),(0,i.jsx)(t.td,{children:"Batch is open for new inputs"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"ready"}),(0,i.jsx)(t.td,{children:"Batch has been published and no longer open for new inputs."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"in-progress"}),(0,i.jsx)(t.td,{children:"Kognic has started annotation of inputs within the batch."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"completed"}),(0,i.jsx)(t.td,{children:"Annotations has been completed."})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"listing-batches",children:"Listing Batches"}),"\n",(0,i.jsx)(t.p,{children:"All existing batches withint a project can be listed by using the Python API KognicIOClient."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'from kognic.io.client import KognicIOClient\nclient = KognicIOClient()\nproject_batches = client.project.get_project_batches(project="<project_external_id>")\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Alternatively, batches can be listed with the ",(0,i.jsx)(t.code,{children:"kognicutil"})," CLI"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-shell",children:"kognicutil projects <project_external_id> --get-batches\n"})}),"\n",(0,i.jsx)(t.h3,{id:"creating-batches",children:"Creating Batches"}),"\n",(0,i.jsxs)(t.p,{children:["To create a new batch in the ",(0,i.jsx)(t.code,{children:"open"})," state within a project"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'from kognic.io.client import KognicIOClient\nclient = KognicIOClient()\nproject_batch = client.project.create_batch(\n  project="<project_external_id>",\n  batch="<batch_external_id>",\n)\n'})}),"\n",(0,i.jsxs)(t.p,{children:["The newly created batch will contain the same ",(0,i.jsx)(t.a,{href:"annotation_types",children:"Annotation Types"})," as\nthe latest batch by default."]}),"\n",(0,i.jsxs)(t.p,{children:["This method has an optional flag ",(0,i.jsx)(t.code,{children:"publish_previous_batches"})," which defaults to ",(0,i.jsx)(t.code,{children:"False"}),". By setting this flag to\n",(0,i.jsx)(t.code,{children:"True"}),', as shown in the example below, all previous batches in the "open" state would be published and you\nwould no longer be able to upload new inputs to those batches.\nYou should therefore be certain that you no longer need to upload more inputs to the\nprevious batches if you use this flag.']}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'from kognic.io.client import KognicIOClient\nclient = KognicIOClient()\nproject_batch = client.project.create_batch(\n  project="<project_external_id>",\n  batch="<batch_external_id>",\n  publish_previous_batches=True,\n)\n'})}),"\n",(0,i.jsx)(t.admonition,{title:"Contact Kognic before use",type:"caution",children:(0,i.jsx)(t.p,{children:"Kognic usually helps with creating batches before a client becomes autonomous,\nin order to avoid any confusion please contact Kognic before you start using this feature."})}),"\n",(0,i.jsx)(t.h3,{id:"publish-batch",children:"Publish Batch"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'from kognic.io.client import KognicIOClient\nclient = KognicIOClient()\nproject_batch = client.project.publish_batch(\n  project="<project_external_id>",\n  batch="<batch_external_id>",\n)\n'})}),"\n",(0,i.jsxs)(t.p,{children:['When the input batch is published, the status of the batch will be set to "ready". Published batches are not open for new inputs any longer.\nA project with ',(0,i.jsx)(t.em,{children:"multiple"})," open batches will require you to specify which open batch to target\nwhen creating new inputs, whereas a project with a single open batch will allow you omit the ",(0,i.jsx)(t.code,{children:"batch"})," parameter when\ncreating inputs."]})]})}function d(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>r});var i=n(6540);const c={},o=i.createContext(c);function s(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);