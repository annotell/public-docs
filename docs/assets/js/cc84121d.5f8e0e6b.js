"use strict";(self.webpackChunkkognic_sdk_docs=self.webpackChunkkognic_sdk_docs||[]).push([[758],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(a),d=r,m=p["".concat(s,".").concat(d)]||p[d]||f[d]||o;return a?n.createElement(m,i(i({ref:t},u),{},{components:a})):n.createElement(m,i({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},4860:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const o={title:"Scene Feature Flags"},i=void 0,l={unversionedId:"kognic-io/feature_flags",id:"kognic-io/feature_flags",title:"Scene Feature Flags",description:"To make the scene creation process more flexible we support optional feature flags that are passed at scene creation time.",source:"@site/docs/kognic-io/feature_flags.md",sourceDirName:"kognic-io",slug:"/kognic-io/feature_flags",permalink:"/docs/kognic-io/feature_flags",draft:!1,editUrl:"https://github.com/annotell/public-docs/docs-src/docs/kognic-io/feature_flags.md",tags:[],version:"current",frontMatter:{title:"Scene Feature Flags"},sidebar:"docs",previous:{title:"Motion Compensation",permalink:"/docs/kognic-io/scenes/lidars_with_imu_data"},next:{title:"Pre-annotations",permalink:"/docs/kognic-io/pre_annotations"}},s={},c=[{value:"Supported Features",id:"supported-features",level:2},{value:"<code>PointCloudFeatures</code>",id:"pointcloudfeatures",level:3}],u={toc:c};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"To make the scene creation process more flexible we support optional ",(0,r.kt)("em",{parentName:"p"},"feature flags")," that are passed at scene creation time.\nFeature flags are used to turn on or off parts of the scene creation process."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"FeatureFlags")," is a set-like object that holds the flags. There are three ways to establish a set of flags:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Defaults (some flags will be set): ",(0,r.kt)("inlineCode",{parentName:"li"},"FeatureFlags.default()")),(0,r.kt)("li",{parentName:"ul"},"Empty (no flags are set): ",(0,r.kt)("inlineCode",{parentName:"li"},"FeatureFlags()")),(0,r.kt)("li",{parentName:"ul"},"Custom (exactly the specified flags are\nset): ",(0,r.kt)("inlineCode",{parentName:"li"},"FeatureFlags(FeatureFlags.PointCloudFeatures.MOTION_COMPENSATION)"))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"FeatureFlags")," constructor takes one or more params, each of which is a flag from the lists defined below."),(0,r.kt)("p",null,"If feature flags are not passed when a scene is created, or they are ",(0,r.kt)("inlineCode",{parentName:"p"},"None"),", then the default set will be used. This\nmeans that there is no need to specify feature flags in most cases."),(0,r.kt)("h2",{id:"supported-features"},"Supported Features"),(0,r.kt)("p",null,"Individual flags are found on the enums found within ",(0,r.kt)("inlineCode",{parentName:"p"},"FeatureFlags"),"."),(0,r.kt)("h3",{id:"pointcloudfeatures"},(0,r.kt)("inlineCode",{parentName:"h3"},"PointCloudFeatures")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Flag"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default state"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"MOTION_COMPENSATION")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Enabled"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Causes ",(0,r.kt)("a",{parentName:"td",href:"scenes/lidars_with_imu_data"},"motion compensation of point clouds")," using IMU data.")))))}p.isMDXComponent=!0}}]);