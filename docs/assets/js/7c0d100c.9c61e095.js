"use strict";(self.webpackChunkkognic_sdk_docs=self.webpackChunkkognic_sdk_docs||[]).push([[617],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=o,h=u["".concat(p,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2873:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var a=n(7462),o=(n(7294),n(3905));const r={title:"Pre-annotations"},i=void 0,s={unversionedId:"kognic-io/pre_annotations",id:"kognic-io/pre_annotations",title:"Pre-annotations",description:"This feature is in an alpha stage and might be subject to changes",source:"@site/docs/kognic-io/pre_annotations.md",sourceDirName:"kognic-io",slug:"/kognic-io/pre_annotations",permalink:"/docs/kognic-io/pre_annotations",draft:!1,editUrl:"https://github.com/annotell/public-docs/docs-src/docs/kognic-io/pre_annotations.md",tags:[],version:"current",frontMatter:{title:"Pre-annotations"},sidebar:"docs",previous:{title:"Working with Inputs",permalink:"/docs/kognic-io/working_with_inputs"},next:{title:"Motion Compensation for Multi-Lidar Setups",permalink:"/docs/kognic-io/inputs/lidars_with_imu_data"}},p={},l=[{value:"Creating pre-annotations using the kognic-io client",id:"creating-pre-annotations-using-the-kognic-io-client",level:2},{value:"1. Creating a scene",id:"1-creating-a-scene",level:3},{value:"2. Uploading an OpenLabel annotation",id:"2-uploading-an-openlabel-annotation",level:3},{value:"3. Create the input",id:"3-create-the-input",level:3},{value:"Supported pre-annotation features",id:"supported-pre-annotation-features",level:2},{value:"Geometries",id:"geometries",level:3},{value:"Attributes",id:"attributes",level:3},{value:"Contexts",id:"contexts",level:3},{value:"Frames",id:"frames",level:3},{value:"Relations",id:"relations",level:3},{value:"Streams",id:"streams",level:3},{value:"Example pre-annotation",id:"example-pre-annotation",level:2}],c={toc:l};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"This feature is in an alpha stage and might be subject to changes")),(0,o.kt)("p",null,"Pre-annotations have many uses in ground-truth production. The pre-annotations feature allows information about the objects already known to be present in an input to be specified. Please reach out to our Advisory Services team to see how they can best be used for your use-case."),(0,o.kt)("p",null,"The Kognic platform supports uploading pre-annotations in the OpenLabel format using the ",(0,o.kt)("a",{parentName:"p",href:"https://pypi.org/project/kognic-openlabel"},"kognic-openlabel package")),(0,o.kt)("h2",{id:"creating-pre-annotations-using-the-kognic-io-client"},"Creating pre-annotations using the kognic-io client"),(0,o.kt)("p",null,"There are 3 steps that are needed in order to create pre-annotations in the Kognic platform."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a scene by uploading all the needed data"),(0,o.kt)("li",{parentName:"ol"},"Upload an OpenLabel annotation as a pre-annotation"),(0,o.kt)("li",{parentName:"ol"},"Create an input from the scene")),(0,o.kt)("h3",{id:"1-creating-a-scene"},"1. Creating a scene"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The scene is a subset of the input, specifically refering to the data, such as images or pointclouds.\nAn input is what is created when this data is ready to be annotated.")),(0,o.kt)("p",null,'The interface for creating just a scene, without an input, is the same as we are familiar with.\nThe exception is that by not providing a project or a batch in the function call, the scene will be "dangling" until deemed ready for annotation'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"reference",reference:!0},"https://github.com/annotell/annotell-python/blob/master/kognic-io/examples/lidars_and_cameras_seq_with_pre_annotations.py#L82-L83\n")),(0,o.kt)("h3",{id:"2-uploading-an-openlabel-annotation"},"2. Uploading an OpenLabel annotation"),(0,o.kt)("p",null,"The pre-annotation can be uploaded to the Kognic platform once the scene has been created successfully."),(0,o.kt)("p",null,"Load your OpenLabel annotation according to the documentation in ",(0,o.kt)("inlineCode",{parentName:"p"},"kognic-openlabel")," and upload it to the Kognic platform as such:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"client.pre_annotation.create(\n    scene_uuid=scene_response.input_uuid, # from step 1\n    pre_annotation=OpenLabelAnnotation(...), \n    dryrun=dryrun\n)\n")),(0,o.kt)("h3",{id:"3-create-the-input"},"3. Create the input"),(0,o.kt)("p",null,"When the scene and pre-annotation have been successfully created, the input can be created.\nThis will add it to the latest open batch in a project, or the specific batch that's specified,\nand be ready for annotation with the pre-annotation present."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"client.lidars_and_cameras_sequence.create_from_scene(\n    scene_uuid=scene_response.input_uuid, # from step 1\n    annotation_types=annotation_types,\n    project=project,\n    dryrun=dryrun\n)\n")),(0,o.kt)("h2",{id:"supported-pre-annotation-features"},"Supported pre-annotation features"),(0,o.kt)("h3",{id:"geometries"},"Geometries"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Cuboid (",(0,o.kt)("inlineCode",{parentName:"li"},"cuboid"),")"),(0,o.kt)("li",{parentName:"ul"},"2D bounding box (",(0,o.kt)("inlineCode",{parentName:"li"},"bbox"),")")),(0,o.kt)("p",null,"Note that all geometries should be specified under frames rather than in the root of the pre-annotation."),(0,o.kt)("h3",{id:"attributes"},"Attributes"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Text"),(0,o.kt)("li",{parentName:"ul"},"Num"),(0,o.kt)("li",{parentName:"ul"},"Boolean")),(0,o.kt)("p",null,"At the moment only attributes for the objects are supported, i.e. geometry specific ones are not (apart from the ",(0,o.kt)("inlineCode",{parentName:"p"},"stream"),"\nproperty). Attributes can be static (specified in the ",(0,o.kt)("inlineCode",{parentName:"p"},"objects")," key) or dynamic (specified in the ",(0,o.kt)("inlineCode",{parentName:"p"},"object_data")," for the\nobject in the frame) and must be allowed by the ",(0,o.kt)("a",{parentName:"p",href:"/docs/#task-definition"},"task definition"),", if one exists\nwhen creating an input from a scene."),(0,o.kt)("h3",{id:"contexts"},"Contexts"),(0,o.kt)("p",null,"Currently not supported. Contact Kognic if you need support for this or use regular attributes instead."),(0,o.kt)("h3",{id:"frames"},"Frames"),(0,o.kt)("p",null,"Every pre-annotation must contain frames with unique timestamps that are among the ones specified in the scene. The\nreason for this is that the timestamps are used to map the frame in the pre-annotation to the correct frame in the scene.\nIn the static case, one frame should be used with timestamp 0."),(0,o.kt)("h3",{id:"relations"},"Relations"),(0,o.kt)("p",null,"Currently not supported. Contact Kognic if you need support for this or use regular attributes instead."),(0,o.kt)("h3",{id:"streams"},"Streams"),(0,o.kt)("p",null,"Every geometry must have the ",(0,o.kt)("inlineCode",{parentName:"p"},"stream")," property specified. This property determines which stream (or sensor) that the\ngeometry appears in. It is important that the stream is among the ones specified in the scene and of the same type, for\nexample ",(0,o.kt)("inlineCode",{parentName:"p"},"camera")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"lidar"),"."),(0,o.kt)("h2",{id:"example-pre-annotation"},"Example pre-annotation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "openlabel": {\n    "frame_intervals": [],\n    "frames": {\n      "0": {\n        "frame_properties": {\n          "timestamp": 0,\n          "external_id": "0",\n          "streams": {"LIDAR1":  {}}\n        },\n        "objects": {\n          "1232b4f4-e3ca-446a-91cb-d8d403703df7": {\n            "object_data": {\n              "cuboid": [\n                {\n                  "attributes": {\n                    "text": [\n                      {\n                        "name": "stream",\n                        "val": "LIDAR1"\n                      }\n                    ]\n                  },\n                  "name": "cuboid-89ac8a2b",\n                  "val": [\n                    2.079312801361084,\n                    -18.919870376586914,\n                    0.3359137773513794,\n                    -0.002808041640852679,\n                    0.022641949116037438,\n                    0.06772797660868829,\n                    0.9974429197838155,\n                    1.767102435869269,\n                    4.099334155319101,\n                    1.3691029802958168\n                  ]\n                }\n              ]\n            }\n          }\n        }\n      }\n    },\n    "metadata": {\n      "schema_version": "1.0.0"\n    },\n    "objects": {\n      "1232b4f4-e3ca-446a-91cb-d8d403703df7": {\n        "name": "1232b4f4-e3ca-446a-91cb-d8d403703df7",\n        "object_data": {\n          "text": [\n            {\n              "name": "color",\n              "val": "red"\n            }\n          ]\n        },\n        "type": "PassengerCar"\n      }\n    },\n    "streams": {\n      "LIDAR1": {\n        "description": "",\n        "type": "lidar"\n      }\n    }\n  }\n}\n')))}u.isMDXComponent=!0}}]);