"use strict";(self.webpackChunkkognic_sdk_docs=self.webpackChunkkognic_sdk_docs||[]).push([[9239],{7624:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>z,contentTitle:()=>W,default:()=>X,frontMatter:()=>$,metadata:()=>Y,toc:()=>Q});var i=a(4848),t=a(8453),o=a(6540),r=a(8215),s=a(3104),c=a(6347),l=a(205),d=a(7485),u=a(1682),m=a(9466);function p(e){return o.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:a}=e;return(0,o.useMemo)((()=>{const e=n??function(e){return p(e).map((e=>{let{props:{value:n,label:a,attributes:i,default:t}}=e;return{value:n,label:a,attributes:i,default:t}}))}(a);return function(e){const n=(0,u.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function f(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:a}=e;const i=(0,c.W6)(),t=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,d.aZ)(t),(0,o.useCallback)((e=>{if(!t)return;const n=new URLSearchParams(i.location.search);n.set(t,e),i.replace({...i.location,search:n.toString()})}),[t,i])]}function b(e){const{defaultValue:n,queryString:a=!1,groupId:i}=e,t=h(e),[r,s]=(0,o.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!f({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=a.find((e=>e.default))??a[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:t}))),[c,d]=g({queryString:a,groupId:i}),[u,p]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,t]=(0,m.Dv)(a);return[i,(0,o.useCallback)((e=>{a&&t.set(e)}),[a,t])]}({groupId:i}),b=(()=>{const e=c??u;return f({value:e,tabValues:t})?e:null})();(0,l.A)((()=>{b&&s(b)}),[b]);return{selectedValue:r,selectValue:(0,o.useCallback)((e=>{if(!f({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);s(e),d(e),p(e)}),[d,p,t]),tabValues:t}}var x=a(2303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function _(e){let{className:n,block:a,selectedValue:t,selectValue:o,tabValues:c}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.a_)(),u=e=>{const n=e.currentTarget,a=l.indexOf(n),i=c[a].value;i!==t&&(d(n),o(i))},m=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const a=l.indexOf(e.currentTarget)+1;n=l[a]??l[0];break}case"ArrowLeft":{const a=l.indexOf(e.currentTarget)-1;n=l[a]??l[l.length-1];break}}n?.focus()};return(0,i.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":a},n),children:c.map((e=>{let{value:n,label:a,attributes:o}=e;return(0,i.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>l.push(e),onKeyDown:m,onClick:u,...o,className:(0,r.A)("tabs__item",j.tabItem,o?.className,{"tabs__item--active":t===n}),children:a??n},n)}))})}function v(e){let{lazy:n,children:a,selectedValue:t}=e;const r=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===t));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return(0,i.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==t})))})}function C(e){const n=b(e);return(0,i.jsxs)("div",{className:(0,r.A)("tabs-container",j.tabList),children:[(0,i.jsx)(_,{...n,...e}),(0,i.jsx)(v,{...n,...e})]})}function y(e){const n=(0,x.A)();return(0,i.jsx)(C,{...e,children:p(e.children)},String(n))}const k={tabItem:"tabItem_Ymn6"};function w(e){let{children:n,hidden:a,className:t}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.A)(k.tabItem,t),hidden:a,children:n})}function I(e){const n={code:"code",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from kognic.io.client import KognicIOClient\nfrom kognic.io.model.scene.cameras import Cameras, Frame\nfrom kognic.io.model.scene.resources import Image\n\n# 1. Build scene object\nscene = Cameras(\n    external_id=f"my-first-scene",\n    frame=Frame(images=[Image(filename="path/to/image.jpg")])\n)\n\n# 2. Upload scene\nclient = KognicIOClient()\nresp = client.cameras.create(scene)\nprint("Scene uploaded, got uuid:", resp.scene_uuid)\n'})})}function A(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(I,{...e})}):I(e)}function P(e){const n={code:"code",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from kognic.io.client import KognicIOClient\nfrom kognic.io.model.scene.cameras import Cameras, Frame\nfrom kognic.io.model.scene.resources import Image\n\n# 1. Build scene object\nscene = Cameras(\n    external_id=f"my-first-scene",\n    frame=Frame(\n        images=[\n          # Sensor names must be unique\n          Image(sensor_name = "CAM1", filename="path/to/image1.jpg"),\n          Image(sensor_name = "CAM2", filename="path/to/image2.jpg")\n        ],\n    )\n)\n\n# 2. Upload scene\nclient = KognicIOClient()\nresp = client.cameras.create(scene)\nprint("Scene uploaded, got uuid:", resp.scene_uuid)\n'})})}function S(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(P,{...e})}):P(e)}function q(e){const n={code:"code",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from kognic.io.client import KognicIOClient\nfrom kognic.io.model.scene.cameras_sequence import CamerasSequence, Frame\nfrom kognic.io.model.scene.resources import Image\n\n# 1. Build scene object\nscene = CamerasSequence(\n    external_id=f"my-first-scene",\n    frames=[\n        # Relative timestamps must be unique and strictly increasing\n        Frame(\n            relative_timestamp=0,\n            images=[Image(filename="path/to/image1.jpg")],\n        ),\n        Frame(\n            relative_timestamp=100,\n            images=[Image(filename="path/to/image2.jpg")],\n        ),\n        Frame(\n            relative_timestamp=200,\n            images=[Image(filename="path/to/image3.jpg")],\n        ),\n    ]\n)\n\n# 2. Upload scene\nclient = KognicIOClient()\nresp = client.cameras_sequence.create(scene)\nprint("Scene uploaded, got uuid:", resp.scene_uuid) \n'})})}function R(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(q,{...e})}):q(e)}function K(e){const n={code:"code",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from kognic.io.client import KognicIOClient\nfrom kognic.io.model.calibration import SensorCalibration, PinholeCalibration, LidarCalibration\nfrom kognic.io.model.scene.lidars_and_cameras import LidarsAndCameras, Frame\nfrom kognic.io.model.scene.resources import Image, PointCloud\n\nclient = KognicIOClient()\n\n# 1. Create calibration (see calibration section for more details)\nsensor_calibration = SensorCalibration(\n    external_id = "my-first-calibration",\n    calibration = {\n        "CAM": PinholeCalibration(...),\n        "lidar": LidarCalibration(...)\n    }\n)\ncreated_calibration = client.calibration.create(sensor_calibration)\n\n# 2. Build scene object\nscene = LidarsAndCameras(\n    external_id=f"my-first-scene",\n    calibration_id = created_calibration.id,\n    frame=Frame(\n        images=[Image(sensor_name = "CAM", filename="path/to/image.jpg")],\n        point_clouds=[PointCloud(sensor_name = "lidar", filename="path/to/pointcloud.pcd")]\n    )\n)\n\n# 3. Upload scene\nresp = client.lidars_and_cameras.create(scene)\nprint("Scene uploaded, got uuid:", resp.scene_uuid)\n'})})}function L(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(K,{...e})}):K(e)}function N(e){const n={code:"code",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from kognic.io.client import KognicIOClient\nfrom kognic.io.model.calibration import SensorCalibration, PinholeCalibration, LidarCalibration\nfrom kognic.io.model.scene.lidars_and_cameras import LidarsAndCameras, Frame\nfrom kognic.io.model.scene.resources import Image, PointCloud\n\nclient = KognicIOClient()\n\n# 1. Create calibration (see calibration section for more details)\nsensor_calibration = SensorCalibration(\n    external_id = "my-first-calibration",\n    calibration = {\n        "CAM1": PinholeCalibration(...),\n        "CAM2": PinholeCalibration(...),\n        "lidar": LidarCalibration(...)\n    }\n)\ncreated_calibration = client.calibration.create(sensor_calibration)\n\n# 2. Build scene object\nscene = LidarsAndCameras(\n    external_id=f"my-first-scene",\n    calibration_id = created_calibration.id,\n    frame=Frame(\n        images=[\n          Image(sensor_name = "CAM1", filename="path/to/image1.jpg"),\n          Image(sensor_name = "CAM2", filename="path/to/image2.jpg"),\n        ],\n        point_clouds=[PointCloud(sensor_name = "lidar", filename="path/to/pointcloud.pcd")]\n    )\n)\n\n# 3. Upload scene\nclient = KognicIOClient()\nresp = client.lidars_and_cameras.create(scene)\nprint("Scene uploaded, got uuid:", resp.scene_uuid)\n'})})}function T(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(N,{...e})}):N(e)}function U(e){const n={code:"code",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from kognic.io.client import KognicIOClient\nfrom kognic.io.model.calibration import SensorCalibration, PinholeCalibration, LidarCalibration\nfrom kognic.io.model.scene.lidars_and_cameras_sequence import LidarsAndCamerasSequence, Frame\nfrom kognic.io.model.scene.resources import Image, PointCloud\n\nclient = KognicIOClient()\n\n# 1. Create calibration (see calibration section for more details)\ncalibration = { "CAM": PinholeCalibration(...), "lidar": LidarCalibration(...) }\nsensor_calibration = SensorCalibration(\n    external_id = "my-first-calibration",\n    calibration = {\n        "CAM": PinholeCalibration(...),\n        "lidar": LidarCalibration(...)\n    }\n)\ncreated_calibration = client.calibration.create(sensor_calibration)\n\n# 2. Build scene object\nscene = LidarsAndCamerasSequence(\n    external_id=f"my-first-scene",\n    calibration_id = created_calibration.id,\n    frames=[\n        # Relative timestamps must be unique and strictly increasing\n        Frame(\n            relative_timestamp=0,\n            images=[Image(sensor_name = "CAM", filename="path/to/image1.jpg")],\n            point_clouds=[PointCloud(sensor_name = "lidar", filename="path/to/pointcloud1.pcd")]\n        ),\n        Frame(\n            relative_timestamp=100,\n            images=[Image(sensor_name = "CAM", filename="path/to/image2.jpg")],\n            point_clouds=[PointCloud(sensor_name = "lidar", filename="path/to/pointcloud2.pcd")]\n        ),\n        Frame(\n            relative_timestamp=200,\n            images=[Image(sensor_name = "CAM", filename="path/to/image3.jpg")],\n            point_clouds=[PointCloud(sensor_name = "lidar", filename="path/to/pointcloud3.pcd")]\n        ),\n    ]\n)\n\n# 3. Upload scene\nresp = client.lidars_and_cameras_sequence.create(scene)\nprint("Scene uploaded, got uuid:", resp.scene_uuid) \n'})})}function D(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(U,{...e})}):U(e)}const M=[];function V(e){const n={code:"code",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'scene = client.scene.get_scenes_by_uuids([scene_uuid])[0]\nprint(f"Scene {scene.uuid} has status {scene.status}")\n'})})}function F(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(V,{...e})}):V(e)}const O=[];function E(e){const n={code:"code",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'scene = client.scene.get_scenes_by_uuids([scene_uuid])[0]\nprint(f"Url: {scene.view_link}")\n'})})}function B(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(E,{...e})}):E(e)}const $={id:"upload-your-first-scene",title:"Upload your first scene",slug:"/upload-your-first-scene"},W="Upload your first scene",Y={id:"upload-your-first-scene",title:"Upload your first scene",description:"When uploading raw data to the Kognic Platform, you need to do so in the form of a scene.",source:"@site/docs/upload-your-first-scene.mdx",sourceDirName:".",slug:"/upload-your-first-scene",permalink:"/docs/upload-your-first-scene",draft:!1,unlisted:!1,editUrl:"https://github.com/annotell/public-docs/edit/master/docs-src/docs/upload-your-first-scene.mdx",tags:[],version:"current",frontMatter:{id:"upload-your-first-scene",title:"Upload your first scene",slug:"/upload-your-first-scene"},sidebar:"docs",previous:{title:"Quickstart",permalink:"/docs/"},next:{title:"Kognic APIs",permalink:"/docs/kognic-apis"}},z={},Q=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Uploading a 2D scene",id:"uploading-a-2d-scene",level:2},...M,...O,{value:"Uploading a 2D/3D scene",id:"uploading-a-2d3d-scene",level:2},...M,...O,{value:"Next steps",id:"next-steps",level:2}];function J(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"upload-your-first-scene",children:"Upload your first scene"}),"\n",(0,i.jsxs)(n.p,{children:["When uploading raw data to the Kognic Platform, you need to do so in the form of a ",(0,i.jsx)(n.strong,{children:"scene"}),".\nA scene is a collection of data from different sources, such as images, point clouds, and other sensor data.\nThis guide will walk you through the process of uploading your first scene, either in 2D or 3D."]}),"\n",(0,i.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(n.p,{children:["You have successfully followed the ",(0,i.jsx)(n.a,{href:"./quickstart",children:"Quickstart"})," guide and have the ",(0,i.jsx)(n.code,{children:"kognic-io"})," client installed."]}),"\n",(0,i.jsx)(n.h2,{id:"uploading-a-2d-scene",children:"Uploading a 2D scene"}),"\n",(0,i.jsxs)(n.p,{children:["To upload a 2D scene, you need to have the raw images available on your local machine (or create a ",(0,i.jsx)(n.a,{href:"https://developers.kognic.com/docs/kognic-io/overview#data-from-callback",children:"callback"})," for remote data).\nIt is a two-step process:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Build the scene object in Python"}),"\n",(0,i.jsx)(n.li,{children:"Upload the scene object to the Kognic Platform"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Below follows examples for a few different cases."}),"\n",(0,i.jsxs)(y,{children:[(0,i.jsx)(w,{value:"one-image",label:"One Image",default:!0,children:(0,i.jsx)(A,{})}),(0,i.jsx)(w,{value:"multiple-images",label:"Multiple Images",default:!0,children:(0,i.jsx)(S,{})}),(0,i.jsx)(w,{value:"sequence",label:"Sequence",children:(0,i.jsx)(R,{})})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"scene_uuid"})," returned in the response can be used to reference the scene in future API calls. For example, to check the status of the scene:"]}),"\n",(0,i.jsx)(F,{}),"\n",(0,i.jsx)(n.p,{children:"This is often useful when uploading large scenes that take some time to process. If the scene is ready, you can view it in the Kognic Platform by following the link retrieved from the API:"}),"\n",(0,i.jsx)(B,{}),"\n","\n",(0,i.jsx)(n.h2,{id:"uploading-a-2d3d-scene",children:"Uploading a 2D/3D scene"}),"\n",(0,i.jsxs)(n.p,{children:["To upload a 2D/3D scene, you need to have the raw images and point clouds available on your local machine (or create a ",(0,i.jsx)(n.a,{href:"https://developers.kognic.com/docs/kognic-io/overview#data-from-callback",children:"callback"})," for remote data).\nIn addition you need to have calibration data available.\nIt is a three-step process:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Create a ",(0,i.jsx)(n.a,{href:"./kognic-io/calibrations/overview",children:"calibration"})]}),"\n",(0,i.jsx)(n.li,{children:"Build the scene object in Python, referencing the calibration from the previous step"}),"\n",(0,i.jsx)(n.li,{children:"Upload the scene object to the Kognic Platform"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Below follows examples for a few different cases."}),"\n",(0,i.jsxs)(y,{children:[(0,i.jsx)(w,{value:"one-image-one-lidar",label:"One Image",default:!0,children:(0,i.jsx)(L,{})}),(0,i.jsx)(w,{value:"multiple-images",label:"Multiple Images",default:!0,children:(0,i.jsx)(T,{})}),(0,i.jsx)(w,{value:"2d/3d-sequence",label:"Sequence",default:!0,children:(0,i.jsx)(D,{})})]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Multiple point clouds is also supported, but not shown in the examples above since that requires a bit more data.\nSee the ",(0,i.jsx)(n.a,{href:"./kognic-io/scenes/motion-compensation",children:"Motion Compensation"})," section for more details."]})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"scene_uuid"})," returned in the response can be used to reference the scene in future API calls. For example, to check the status of the scene:"]}),"\n",(0,i.jsx)(F,{}),"\n",(0,i.jsx)(n.p,{children:"This is often useful when uploading large scenes that take some time to process. If the scene is ready, you can view it in the Kognic Platform by following the link retrieved from the API:"}),"\n",(0,i.jsx)(B,{}),"\n","\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/key-concepts",children:"Key concepts"}),": Learn about the key concepts of the Kognic Platform"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./kognic-io/overview",children:"Scenes"}),": Dive deeper into scenes and how to work with them"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./kognic-io/calibrations/overview",children:"Calibrations"}),": Learn how to create and manage calibrations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./kognic-io/working_with_scenes_and_inputs#creating-inputs-from-scene",children:"Sending scene for annotation"}),": Learn how to send a scene for annotation"]}),"\n"]})]})}function X(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(J,{...e})}):J(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>s});var i=a(6540);const t={},o=i.createContext(t);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);